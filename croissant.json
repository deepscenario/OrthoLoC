{
  "@context": {
    "@language": "en",
    "@vocab": "https://schema.org/",
    "citeAs": "cr:citeAs",
    "column": "cr:column",
    "conformsTo": "dct:conformsTo",
    "cr": "http://mlcommons.org/croissant/",
    "rai": "http://mlcommons.org/croissant/RAI/",
    "data": {
      "@id": "cr:data",
      "@type": "@json"
    },
    "dataType": {
      "@id": "cr:dataType",
      "@type": "@vocab"
    },
    "dct": "http://purl.org/dc/terms/",
    "examples": {
      "@id": "cr:examples",
      "@type": "@json"
    },
    "extract": "cr:extract",
    "field": "cr:field",
    "fileProperty": "cr:fileProperty",
    "fileObject": "cr:fileObject",
    "fileSet": "cr:fileSet",
    "format": "cr:format",
    "includes": "cr:includes",
    "isLiveDataset": "cr:isLiveDataset",
    "jsonPath": "cr:jsonPath",
    "key": "cr:key",
    "md5": "cr:md5",
    "parentField": "cr:parentField",
    "path": "cr:path",
    "recordSet": "cr:recordSet",
    "references": "cr:references",
    "regex": "cr:regex",
    "repeated": "cr:repeated",
    "replace": "cr:replace",
    "sc": "https://schema.org/",
    "separator": "cr:separator",
    "source": "cr:source",
    "subField": "cr:subField",
    "transform": "cr:transform"
  },
  "@type": "sc:Dataset",
  "name": "OrthoLoc",
  "description": "OrthoLoC is the first paired UAV localization dataset using lightweight orthographic geodata, comprising 16,425 images captured across Germany and the US, spanning 47 regions and 19 cities. The dataset introduces a new paradigm for aerial localization that leverages readily available digital orthophotos (DOPs) and digital surface models (DSMs) instead of resource-intensive 3D models or large image databases. This approach is particularly valuable given the increasing availability of regularly updated geodata from governmental authorities like the European Union. OrthoLoC captures diverse environments including urban, suburban, highways, and natural landscapes with varying perspectives and altitudes. To increase visual and structural variations that bridge the gap for real-world deployment, we leveraged open geodata and aligned it to photogrammetry reconstructions, creating three domain categories: same-domain (minimal differences), DOP cross-domain (visual variations only), and DOP-DSM cross-domain (both visual and geometric variations). Each sample provides multiple modalities: query UAV image, 3D point map, DOP, DSM, 3D mesh, 6DoF camera pose, intrinsic parameters, and representative 3D keypoints. The dataset's paired structure enables isolated evaluation of localization algorithms independent of retrieval performance, providing researchers with a systematic framework for benchmarking UAV localization approaches using orthographic reference data.",
  "license": "https://creativecommons.org/licenses/by-nc-sa/4.0/",
  "conformsTo": "http://mlcommons.org/croissant/1.0",
  "citeAs": "N/A until published",
  "url": "https://cvg.cit.tum.de/webshare/g/papers/Dhaouadi/OrthoLoC/",
  "distribution": [
    {
      "@type": "cr:FileObject",
      "@id": "github-repository",
      "name": "github-repository",
      "description": "OrthoLoc repository on GitHub.",
      "contentUrl": "https://github.com/openai/gpt-3",
      "encodingFormat": "git+https",
      "sha256": "main"
    },
    {
      "@type": "cr:FileObject",
      "@id": "dataset-hosting",
      "name": "dataset-hosting",
      "description": "OrthoLoc dataset hosting.",
      "contentUrl": "https://cvg.cit.tum.de/webshare/g/papers/Dhaouadi/OrthoLoC/",
      "encodingFormat": "https",
      "sha256": "main"
    },
    {
      "@type": "cr:FileSet",
      "@id": "train-files",
      "name": "train-files",
      "description": "Train files are hosted on the GitHub repository.",
      "containedIn": {
        "@id": "github-repository"
      },
      "encodingFormat": "application/numpy-array",
      "includes": "train/*.npz"
    },
    {
      "@type": "cr:FileSet",
      "@id": "val-files",
      "name": "val-files",
      "description": "Val files are hosted on the GitHub repository.",
      "containedIn": {
        "@id": "github-repository"
      },
      "encodingFormat": "application/numpy-array",
      "includes": "val/*.npz"
    },
    {
      "@type": "cr:FileSet",
      "@id": "test_inPlace-files",
      "name": "test_inPlace-files",
      "description": "test_inPlace files are hosted on the GitHub repository.",
      "containedIn": {
        "@id": "github-repository"
      },
      "encodingFormat": "application/numpy-array",
      "includes": "test_inPlace/*.npz"
    },
    {
      "@type": "cr:FileSet",
      "@id": "test_outPlace-files",
      "name": "test_outPlace-files",
      "description": "test_outPlace files are hosted on the GitHub repository.",
      "containedIn": {
        "@id": "github-repository"
      },
      "encodingFormat": "application/numpy-array",
      "includes": "test_outPlace/*.npz"
    }
  ],
  "recordSet": [
    {
      "@type": "cr:RecordSet",
      "@id": "train",
      "name": "train",
      "description": "Train split of the dataset",
      "field": [
        {
          "@type": "cr:Field",
          "@id": "train/sample_id",
          "name": "sample_id",
          "description": "The ID of the sample as string",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "column": "sample_id"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/image_query",
          "name": "image_query",
          "description": "The query image as numpy array of shape (H, W, 3)",
          "dataType": "cr:UInt8",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "column": "image_query"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/point_map",
          "name": "point_map",
          "description": "The point map as numpy array of shape (H, W, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "column": "point_map"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/image_dop",
          "name": "image_dop",
          "description": "The DOP image as numpy array of shape (H_geo, W_geo, 3)",
          "dataType": "cr:UInt8",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "column": "image_dop"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/dsm",
          "name": "dsm",
          "description": "The DSM image as numpy array of shape (H_geo, W_geo, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "column": "dsm"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/scale",
          "name": "scale",
          "description": "The scale of a single pixel in the DOP and DSM images in meters",
          "dataType": "sc:Float",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "column": "scale"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/extrinsics",
          "name": "extrinsics",
          "description": "The extrinsics (world to cam) of the query image as numpy array of shape (3, 4)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "column": "extrinsics"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/intrinsics",
          "name": "intrinsics",
          "description": "The intrinsics of the query image as numpy array of shape (3, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "column": "intrinsics"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/keypoints",
          "name": "keypoints",
          "description": "The 3D keypoints of the query image as numpy array of shape (N, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "column": "keypoints"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/vertices",
          "name": "vertices",
          "description": "The 3D vertices of the local mesh as numpy array of shape (M, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "column": "vertices"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/faces",
          "name": "faces",
          "description": "The faces of the local mesh as numpy array of shape (L, 3)",
          "dataType": "cr:Int32",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "column": "faces"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/extrinsics_refined",
          "name": "extrinsics_refined",
          "description": "Camera pose parameters optimized to compensate for rasterization artifacts and missing 0.5D information (building facades) in the DSM. Computed using ground truth correspondences between query images and DOP/DSM data via PnP RANSAC.",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "column": "extrinsics_refined"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/filename",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{type_of_the_sample}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "^(.*)$"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/location_id",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{sample_type}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "(?<=L)\\d+(?=_)"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/sample_type",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{sample_type}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "(?<=_)[A-Za-z]+(?=\\d)"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "train/sample_index",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{sample_type}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "train-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "(?<=[A-Za-z])\\d+(?=\\.npz)"
            }
          }
        }
      ]
    },
    {
      "@type": "cr:RecordSet",
      "@id": "val",
      "name": "val",
      "description": "val split of the dataset",
      "field": [
        {
          "@type": "cr:Field",
          "@id": "val/sample_id",
          "name": "sample_id",
          "description": "The ID of the sample as string",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "column": "sample_id"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/image_query",
          "name": "image_query",
          "description": "The query image as numpy array of shape (H, W, 3)",
          "dataType": "cr:UInt8",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "column": "image_query"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/point_map",
          "name": "point_map",
          "description": "The point map as numpy array of shape (H, W, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "column": "point_map"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/image_dop",
          "name": "image_dop",
          "description": "The DOP image as numpy array of shape (H_geo, W_geo, 3)",
          "dataType": "cr:UInt8",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "column": "image_dop"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/dsm",
          "name": "dsm",
          "description": "The DSM image as numpy array of shape (H_geo, W_geo, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "column": "dsm"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/scale",
          "name": "scale",
          "description": "The scale of a single pixel in the DOP and DSM images in meters",
          "dataType": "sc:Float",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "column": "scale"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/extrinsics",
          "name": "extrinsics",
          "description": "The extrinsics (world to cam) of the query image as numpy array of shape (3, 4)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "column": "extrinsics"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/intrinsics",
          "name": "intrinsics",
          "description": "The intrinsics of the query image as numpy array of shape (3, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "column": "intrinsics"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/keypoints",
          "name": "keypoints",
          "description": "The 3D keypoints of the query image as numpy array of shape (N, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "column": "keypoints"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/vertices",
          "name": "vertices",
          "description": "The 3D vertices of the local mesh as numpy array of shape (M, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "column": "vertices"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/faces",
          "name": "faces",
          "description": "The faces of the local mesh as numpy array of shape (L, 3)",
          "dataType": "cr:Int32",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "column": "faces"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/extrinsics_refined",
          "name": "extrinsics_refined",
          "description": "Camera pose parameters optimized to compensate for rasterization artifacts and missing 0.5D information (building facades) in the DSM. Computed using ground truth correspondences between query images and DOP/DSM data via PnP RANSAC.",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "column": "extrinsics_refined"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/filename",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{type_of_the_sample}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "^(.*)$"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/location_id",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{sample_type}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "(?<=L)\\d+(?=_)"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/sample_type",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{sample_type}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "(?<=_)[A-Za-z]+(?=\\d)"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "val/sample_index",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{sample_type}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "val-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "(?<=[A-Za-z])\\d+(?=\\.npz)"
            }
          }
        }
      ]
    },
    {
      "@type": "cr:RecordSet",
      "@id": "test_inPlace",
      "name": "test_inPlace",
      "description": "test_inPlace split of the dataset",
      "field": [
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/sample_id",
          "name": "sample_id",
          "description": "The ID of the sample as string",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "column": "sample_id"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/image_query",
          "name": "image_query",
          "description": "The query image as numpy array of shape (H, W, 3)",
          "dataType": "cr:UInt8",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "column": "image_query"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/point_map",
          "name": "point_map",
          "description": "The point map as numpy array of shape (H, W, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "column": "point_map"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/image_dop",
          "name": "image_dop",
          "description": "The DOP image as numpy array of shape (H_geo, W_geo, 3)",
          "dataType": "cr:UInt8",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "column": "image_dop"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/dsm",
          "name": "dsm",
          "description": "The DSM image as numpy array of shape (H_geo, W_geo, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "column": "dsm"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/scale",
          "name": "scale",
          "description": "The scale of a single pixel in the DOP and DSM images in meters",
          "dataType": "sc:Float",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "column": "scale"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/extrinsics",
          "name": "extrinsics",
          "description": "The extrinsics (world to cam) of the query image as numpy array of shape (3, 4)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "column": "extrinsics"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/intrinsics",
          "name": "intrinsics",
          "description": "The intrinsics of the query image as numpy array of shape (3, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "column": "intrinsics"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/keypoints",
          "name": "keypoints",
          "description": "The 3D keypoints of the query image as numpy array of shape (N, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "column": "keypoints"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/vertices",
          "name": "vertices",
          "description": "The 3D vertices of the local mesh as numpy array of shape (M, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "column": "vertices"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/faces",
          "name": "faces",
          "description": "The faces of the local mesh as numpy array of shape (L, 3)",
          "dataType": "cr:Int32",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "column": "faces"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/extrinsics_refined",
          "name": "extrinsics_refined",
          "description": "Camera pose parameters optimized to compensate for rasterization artifacts and missing 0.5D information (building facades) in the DSM. Computed using ground truth correspondences between query images and DOP/DSM data via PnP RANSAC.",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "column": "extrinsics_refined"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/filename",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{type_of_the_sample}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "^(.*)$"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/location_id",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{sample_type}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "(?<=L)\\d+(?=_)"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/sample_type",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{sample_type}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "(?<=_)[A-Za-z]+(?=\\d)"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_inPlace/sample_index",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{sample_type}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "test_inPlace-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "(?<=[A-Za-z])\\d+(?=\\.npz)"
            }
          }
        }
      ]
    },
    {
      "@type": "cr:RecordSet",
      "@id": "test_outPlace",
      "name": "test_outPlace",
      "description": "test_outPlace split of the dataset",
      "field": [
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/sample_id",
          "name": "sample_id",
          "description": "The ID of the sample as string",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "column": "sample_id"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/image_query",
          "name": "image_query",
          "description": "The query image as numpy array of shape (H, W, 3)",
          "dataType": "cr:UInt8",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "column": "image_query"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/point_map",
          "name": "point_map",
          "description": "The point map as numpy array of shape (H, W, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "column": "point_map"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/image_dop",
          "name": "image_dop",
          "description": "The DOP image as numpy array of shape (H_geo, W_geo, 3)",
          "dataType": "cr:UInt8",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "column": "image_dop"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/dsm",
          "name": "dsm",
          "description": "The DSM image as numpy array of shape (H_geo, W_geo, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "column": "dsm"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/scale",
          "name": "scale",
          "description": "The scale of a single pixel in the DOP and DSM images in meters",
          "dataType": "sc:Float",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "column": "scale"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/extrinsics",
          "name": "extrinsics",
          "description": "The extrinsics (world to cam) of the query image as numpy array of shape (3, 4)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "column": "extrinsics"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/intrinsics",
          "name": "intrinsics",
          "description": "The intrinsics of the query image as numpy array of shape (3, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "column": "intrinsics"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/keypoints",
          "name": "keypoints",
          "description": "The 3D keypoints of the query image as numpy array of shape (N, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "column": "keypoints"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/vertices",
          "name": "vertices",
          "description": "The 3D vertices of the local mesh as numpy array of shape (M, 3)",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "column": "vertices"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/faces",
          "name": "faces",
          "description": "The faces of the local mesh as numpy array of shape (L, 3)",
          "dataType": "cr:Int32",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "column": "faces"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/extrinsics_refined",
          "name": "extrinsics_refined",
          "description": "Camera pose parameters optimized to compensate for rasterization artifacts and missing 0.5D information (building facades) in the DSM. Computed using ground truth correspondences between query images and DOP/DSM data via PnP RANSAC.",
          "dataType": "cr:Float32",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "column": "extrinsics_refined"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/location_id",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{sample_type}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "(?<=L)\\d+(?=_)"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/sample_type",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{sample_type}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "(?<=_)[A-Za-z]+(?=\\d)"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "test_outPlace/sample_index",
          "name": "filename",
          "description": "Filename of the NPZ file . The naming of the files follows the pattern: L{location_id}_{sample_type}{sample_index}.npz",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "test_outPlace-files"
            },
            "extract": {
              "fileProperty": "filename"
            },
            "transform": {
              "regex": "(?<=[A-Za-z])\\d+(?=\\.npz)"
            }
          }
        }
      ]
    }
  ]
}
